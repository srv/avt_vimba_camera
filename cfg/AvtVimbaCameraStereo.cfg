#! /usr/bin/env python

PACKAGE='avt_vimba_camera'
NODE='avt_vimba_camera'
CONFIG='AvtVimbaCameraStereo'

from dynamic_reconfigure.msg import SensorLevels
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

trigger_source_enum = gen.enum( [ gen.const("Freerun",   str_t, "Freerun",   "Run at maximum frame rate"),
                        gen.const("Line1",     str_t, "Line1",   "External trigger on SyncIn1 line"),
                        gen.const("Line2",     str_t, "Line2",   "External trigger on SyncIn2 line"),
                        gen.const("Line3",     str_t, "Line3",   "External trigger on SyncIn3 line"),
                        gen.const("Line4",     str_t, "Line4",   "External trigger on SyncIn4 line"),
                        gen.const("FixedRate", str_t, "FixedRate",   "Camera self-triggers at a fixed frame rate defined by `~AcquisitionFrameRateAbs`"),
                        gen.const("Software",  str_t, "Software",   "Software inititated image capture")], "Set Trigger Mode")
trigger_activation_enum = gen.enum([ gen.const("RisingEdge",  str_t, "RisingEdge", ""),
                       gen.const("FallingEdge", str_t, "FallingEdge", ""),
                       gen.const("AnyEdge",     str_t, "AnyEdge", ""),
                       gen.const("LevelHigh",   str_t, "LevelHigh", ""),
                       gen.const("LevelLow",    str_t, "LevelLow", "")], "Set Automatic Control")
trigger_mode_enum = gen.enum([  gen.const("ModeOn",  str_t, "On", ""),
                    gen.const("ModeOff", str_t, "Off", "")], "Trigger mode")
trigger_selector_enum = gen.enum([ gen.const("FrameStart",        str_t, "FrameStart", ""),
                       gen.const("AcquisitionStart",  str_t, "AcquisitionStart", ""),
                       gen.const("AcquisitionEnd",    str_t, "AcquisitionEnd", ""),
                       gen.const("AcquisitionRecord", str_t, "AcquisitionRecord", "")], "Trigger activation selector")
acquisition_mode_enum = gen.enum( [ gen.const("Continuous",  str_t, "Continuous", "After an acquisition start event, the camera will continuously receive frame trigger events."),
                  gen.const("SingleFrame", str_t, "SingleFrame", "The camera will only deliver a single frame trigger event"),
                  gen.const("MultiFrame",  str_t, "MultiFrame", "The camera will acquire the number of images specified by `~AcquisitionFrameCount`. Further trigger events will be ignored"),
                  gen.const("Recorder",    str_t, "Recorder", "The camera will continuously record images into the camera on-board memory")], "Set Trigger Mode")
# Monochrome cameras have mono8,12 and 12Packed. Color cameras have only mono8.
pixelformat_enum = gen.enum([ gen.const("Mono8", str_t,  "Mono8", ""),
                gen.const("Mono12",          str_t,  "Mono12", ""),
                gen.const("Mono12Packed",    str_t,  "Mono12Packed", ""),
                gen.const("BayerRG8", str_t,  "BayerRG8", ""),
                gen.const("BayerRG12Packed", str_t,  "BayerRG12Packed", ""),
                gen.const("BayerGR12",     str_t,  "BayerGR12", ""),
                gen.const("RGB8Packed",    str_t,  "RGB8Packed", ""),
                gen.const("BGR8Packed",      str_t,  "BGR8Packed", "")], "Set Pixel Format")
auto_enum = gen.enum([ gen.const("Off",  str_t, "Off", ""),
                 gen.const("Once", str_t, "Once", ""),
                 gen.const("Auto", str_t, "Continuous", "")], "Set Automatic Control")
balance_ratio_enum = gen.enum([ gen.const("Red", str_t, "Red", ""),
                  gen.const("Blue", str_t, "Blue", "")], "Select the Red or Blue channel to adjust with `~BalanceRatioAbs`")
polarity_enum = gen.enum([ gen.const("Normal",  str_t, "Normal", ""),
                 gen.const("Invert", str_t, "Invert", "")], "Polarity")
ptp_mode_enum = gen.enum([  gen.const("PtpOff",    str_t, "Off",    ""),
                    gen.const("PtpSlave",  str_t, "Slave",  ""),
                    gen.const("PtpMaster", str_t, "Master", ""),
                    gen.const("PtpAuto",   str_t, "Auto",   "")], "Select PrecissionTimeProtocol Mode")
sync_in_selector_enum = gen.enum([ gen.const("SyncIn1",  str_t, "SyncIn1", ""),
                   gen.const("SyncIn2",  str_t, "SyncIn2", ""),
                   gen.const("SyncIn3",  str_t, "SyncIn3", ""),
                   gen.const("SyncIn4",  str_t, "SyncIn4", "")],"Sync-in selector")
sync_out_selector_enum = gen.enum([ gen.const("SyncOut1", str_t, "SyncOut1", ""),
                  gen.const("SyncOut2",  str_t, "SyncOut2", ""),
                  gen.const("SyncOut3",  str_t, "SyncOut3", ""),
                  gen.const("SyncOut4",  str_t, "SyncOut4", "")],"Sync-out selector")
sync_source_enum = gen.enum([ gen.const("GPO", str_t, "GPO", ""),
                gen.const("AcquisitionTriggerReady", str_t, "AcquisitionTriggerReady", ""),
                gen.const("FrameTriggerReady",       str_t, "FrameTriggerReady", ""),
                gen.const("FrameTrigger",            str_t, "FrameTrigger", ""),
                gen.const("Exposing",                str_t, "Exposing", ""),
                gen.const("FrameReadout",            str_t, "FrameReadout", ""),
                gen.const("Imaging",                 str_t, "Imaging", ""),
                gen.const("Acquiring",               str_t, "Acquiring", ""),
                gen.const("LineIn1",                 str_t, "LineIn1", ""),
                gen.const("LineIn2",                 str_t, "LineIn2", "")],"Sync-out signal")
exposure_alg_enum = gen.enum([gen.const("Mean", str_t, "Mean", "[Default] The arithmetic mean of the histogram of the current image is compared to ExposureAutoTarget, and the next image adjusted in exposure time to meet this target. Bright areas are allowed to saturate"),
                              gen.const("FitRange", str_t, "FitRange", "The histogram of the current image is measured, and the exposure time of the next image is adjusted so bright areas are not saturated")],"The following algorithms can be used to calculate auto exposure")


#       Name                    Type      Reconfiguration level             Description         Default   Min   Max

# Different parameters:
#
# LEFT
#
# ROS
gen.add("left_frame_id",             str_t,    SensorLevels.RECONFIGURE_RUNNING, "The optical camera TF frame set in message headers.", "left")
gen.add("left_trig_timestamp_topic", str_t,    SensorLevels.RECONFIGURE_STOP,    "Sets the topic from which an externally trigged camera receives its trigger timestamps.", "")
# ACQUISITION
gen.add("left_acquisition_mode",     str_t,    SensorLevels.RECONFIGURE_STOP,    "Camera acquisition mode", "Continuous", edit_method = acquisition_mode_enum)
gen.add("left_acquisition_rate",     double_t, SensorLevels.RECONFIGURE_RUNNING, "Sets the expected triggering rate in externally triggered mode.", 2.0, 1.0, 30.0)
# TRIGGER
gen.add("left_trigger_source",       str_t,    SensorLevels.RECONFIGURE_STOP,    "Camera trigger source", "FixedRate", edit_method = trigger_source_enum)
gen.add("left_trigger_mode",         str_t,    SensorLevels.RECONFIGURE_STOP,    "Camera trigger mode", "On", edit_method = trigger_mode_enum)
gen.add("left_trigger_selector",     str_t,    SensorLevels.RECONFIGURE_STOP,    "Camera trigger selector", "FrameStart", edit_method = trigger_selector_enum)
gen.add("left_trigger_activation",   str_t,    SensorLevels.RECONFIGURE_STOP,    "Camera trigger activation", "RisingEdge", edit_method = trigger_activation_enum)
gen.add("left_trigger_delay",        double_t, SensorLevels.RECONFIGURE_RUNNING, "Trigger delay in us (only valid when set to external trigger)", 0.0, 0.0, 60000000.0)
# PTP
gen.add("left_ptp_mode",             str_t,    SensorLevels.RECONFIGURE_RUNNING,"Controls the PTP behaviour of the clock port.", "Off", edit_method=ptp_mode_enum)
# GPIO
gen.add("left_sync_in_selector",     str_t,    SensorLevels.RECONFIGURE_STOP, "Selects the sync-out line to control", "SyncIn1", edit_method=sync_in_selector_enum)
gen.add("left_sync_out_polarity",    str_t,    SensorLevels.RECONFIGURE_STOP, "Polarity applied to the sync-out line specified by `sync_out_selector`",  "Normal", edit_method=polarity_enum)
gen.add("left_sync_out_selector",    str_t,    SensorLevels.RECONFIGURE_STOP, "Selects the sync-out line to control", "SyncOut1", edit_method=sync_out_selector_enum)
gen.add("left_sync_out_source",      str_t,    SensorLevels.RECONFIGURE_STOP, "Signal source of the sync-out line specified by `sync_out_selector`", "GPO", edit_method=sync_source_enum)

# RIGHT
#
# ROS
gen.add("right_frame_id",             str_t,    SensorLevels.RECONFIGURE_RUNNING, "The optical camera TF frame set in message headers.", "right")
gen.add("right_trig_timestamp_topic", str_t,    SensorLevels.RECONFIGURE_STOP,    "Sets the topic from which an externally trigged camera receives its trigger timestamps.", "")
# ACQUISITION
gen.add("right_acquisition_mode",     str_t,    SensorLevels.RECONFIGURE_STOP,    "Camera acquisition mode", "Continuous", edit_method = acquisition_mode_enum)
gen.add("right_acquisition_rate",     double_t, SensorLevels.RECONFIGURE_RUNNING, "Sets the expected triggering rate in externally triggered mode.", 10.0, 1.0, 30.0)
# TRIGGER
gen.add("right_trigger_source",       str_t,    SensorLevels.RECONFIGURE_STOP,    "Camera trigger source", "FixedRate", edit_method = trigger_source_enum)
gen.add("right_trigger_mode",         str_t,    SensorLevels.RECONFIGURE_STOP,    "Camera trigger mode", "On", edit_method = trigger_mode_enum)
gen.add("right_trigger_selector",     str_t,    SensorLevels.RECONFIGURE_STOP,    "Camera trigger selector", "FrameStart", edit_method = trigger_selector_enum)
gen.add("right_trigger_activation",   str_t,    SensorLevels.RECONFIGURE_STOP,    "Camera trigger activation", "RisingEdge", edit_method = trigger_activation_enum)
gen.add("right_trigger_delay",        double_t, SensorLevels.RECONFIGURE_RUNNING, "Trigger delay in us (only valid when set to external trigger)", 0.0, 0.0, 60000000.0)
# PTP
gen.add("right_ptp_mode",             str_t,    SensorLevels.RECONFIGURE_RUNNING,"Controls the PTP behaviour of the clock port.", "Off", edit_method=ptp_mode_enum)
# GPIO
gen.add("right_sync_in_selector",     str_t,    SensorLevels.RECONFIGURE_STOP, "Selects the sync-out line to control", "SyncIn1", edit_method=sync_in_selector_enum)
gen.add("right_sync_out_polarity",    str_t,    SensorLevels.RECONFIGURE_STOP, "Polarity applied to the sync-out line specified by `sync_out_selector`",  "Normal", edit_method=polarity_enum)
gen.add("right_sync_out_selector",    str_t,    SensorLevels.RECONFIGURE_STOP, "Selects the sync-out line to control", "SyncOut1", edit_method=sync_out_selector_enum)
gen.add("right_sync_out_source",      str_t,    SensorLevels.RECONFIGURE_STOP, "Signal source of the sync-out line specified by `sync_out_selector`", "GPO", edit_method=sync_source_enum)

# Same parameters:
#
# EXPOSURE
gen.add("exposure",             double_t, SensorLevels.RECONFIGURE_RUNNING, "Camera exposure time in microseconds.", 50000, 41, 60000000)
gen.add("exposure_auto",        str_t,    SensorLevels.RECONFIGURE_RUNNING, "Sets the camera exposure. If continuously automatic, causes the `~exposure` setting to be ignored.", "Continuous", edit_method = auto_enum)
gen.add("exposure_auto_alg",    str_t,    SensorLevels.RECONFIGURE_RUNNING, "The following algorithms can be used to calculate auto exposure", "FitRange", edit_method = exposure_alg_enum)
gen.add("exposure_auto_tol",    int_t,    SensorLevels.RECONFIGURE_RUNNING, "Tolerance in variation from ExposureAutoTarget in which the auto exposure algorithm will not respond.", 5, 0, 50)
gen.add("exposure_auto_max",    int_t,    SensorLevels.RECONFIGURE_RUNNING, "The max exposure time in auto exposure mode, in microseconds.", 50000, 41, 60000000)
gen.add("exposure_auto_min",    int_t,    SensorLevels.RECONFIGURE_RUNNING, "The min exposure time in auto exposure mode, in microseconds.", 41, 41, 60000000)
gen.add("exposure_auto_outliers",int_t,   SensorLevels.RECONFIGURE_RUNNING, "The total pixels from top of the distribution that are ignored by the auto exposure algorithm (0.01% increments)", 0, 0, 10000)
gen.add("exposure_auto_rate",   int_t,    SensorLevels.RECONFIGURE_RUNNING, "The rate at which the auto exposure function changes the exposure setting. 100% is auto exposure adjustments running at full speed, and 50% is half speed.", 100, 0, 100)
gen.add("exposure_auto_target", int_t,    SensorLevels.RECONFIGURE_RUNNING, "The auto exposure target mean value as a percentage, from 0=black to 100=white.", 50, 0, 100)
# GAIN
gen.add("gain",                 double_t, SensorLevels.RECONFIGURE_RUNNING, "The gain level in dB.", 0, 0, 32)
gen.add("gain_auto",            str_t,    SensorLevels.RECONFIGURE_RUNNING, "Sets the analog gain. If continuously automatic, causes the `~gain` setting to be ignored.", "Continuous", edit_method = auto_enum)
gen.add("gain_auto_tol",        int_t,    SensorLevels.RECONFIGURE_RUNNING, "Tolerance in variation from GainAutoTarget in which the auto exposure algorithm will not respond.", 5, 0, 50)
gen.add("gain_auto_max",        double_t, SensorLevels.RECONFIGURE_RUNNING, "The max gain level in auto gain mode, in dB.", 32, 0, 32)
gen.add("gain_auto_min",        double_t, SensorLevels.RECONFIGURE_RUNNING, "The min gain level in auto gain mode, in dB.", 0, 0, 32)
gen.add("gain_auto_outliers",   int_t,    SensorLevels.RECONFIGURE_RUNNING, "The total pixels from top of the distribution that are ignored by the auto gain algorithm (0.01% increments).", 0, 0, 10000)
gen.add("gain_auto_rate",       int_t,    SensorLevels.RECONFIGURE_RUNNING, "The rate percentage at which the auto gain function changes.", 100, 0, 100)
gen.add("gain_auto_target",     int_t,    SensorLevels.RECONFIGURE_RUNNING, "The general lightness or darkness of the auto gain feature. A percentage of maximum brightness.", 50, 0, 100)
# WHITE BALANCE
gen.add("balance_ratio_abs",    double_t, SensorLevels.RECONFIGURE_RUNNING, "Adjusts the gain of the channel selected in the `~BalanceRatioSelector`", 1.0, 0.25, 4.0)
gen.add("balance_ratio_selector",str_t,   SensorLevels.RECONFIGURE_RUNNING, "Select the Red or Blue channel to adjust with `~BalanceRatioAbs`", "Red", edit_method = balance_ratio_enum)
gen.add("whitebalance_auto",     str_t,   SensorLevels.RECONFIGURE_RUNNING, "Whether white balance will continuously adjust to the current scene. Causes the `~whitebalance_red` and `~whitebalance_blue` settings to be ignored.", "Continuous", edit_method = auto_enum)
gen.add("whitebalance_auto_tol", int_t,   SensorLevels.RECONFIGURE_RUNNING, "Tolerance allowed from the ideal white balance values", 5, 0, 50)
gen.add("whitebalance_auto_rate",int_t,   SensorLevels.RECONFIGURE_RUNNING, "Rate of white balance adjustments, from 1 (slowest) to 100 (fastest).", 100, 1, 100)
# BINNING & DEDIMATION
gen.add("binning_x",            int_t,    SensorLevels.RECONFIGURE_RUNNING, "Number of pixels to bin together horizontally.", 1, 1, 8)
gen.add("binning_y",            int_t,    SensorLevels.RECONFIGURE_RUNNING, "Number of pixels to bin together vertically.", 1, 1, 14)
gen.add("decimation_x",         int_t,    SensorLevels.RECONFIGURE_RUNNING, "Number of decimation operations in x.", 1, 1, 8)
gen.add("decimation_y",         int_t,    SensorLevels.RECONFIGURE_RUNNING, "Number of decimation operations in y.", 1, 1, 8)
# ROI
gen.add("width",                int_t,    SensorLevels.RECONFIGURE_RUNNING, "Width of the region of interest (0 for automatic).",  4096, 1, 4096)
gen.add("height",               int_t,    SensorLevels.RECONFIGURE_RUNNING, "Height of the region of interest (0 for automatic).", 4096, 1, 4096)
gen.add("roi_width",            int_t,    SensorLevels.RECONFIGURE_RUNNING, "X offset of the region of interest.", 0, 0, 4095)
gen.add("roi_height",           int_t,    SensorLevels.RECONFIGURE_RUNNING, "X offset of the region of interest.", 0, 0, 4095)
gen.add("roi_offset_x",         int_t,    SensorLevels.RECONFIGURE_RUNNING, "X offset of the region of interest.", 0, 0, 4095)
gen.add("roi_offset_y",         int_t,    SensorLevels.RECONFIGURE_RUNNING, "Y offset of the region of interest.", 0, 0, 4095)
# PIXEL FORMAT
gen.add("pixel_format",         str_t,    SensorLevels.RECONFIGURE_CLOSE,   "Format of the image data.", "Mono8", edit_method=pixelformat_enum)
# BANDWIDTH
gen.add("stream_bytes_per_second", int_t, SensorLevels.RECONFIGURE_RUNNING,"Limits the data rate of the camera.", 45000000, 1, 115000000)

exit(gen.generate(PACKAGE, NODE, CONFIG))
